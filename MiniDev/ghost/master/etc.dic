OnFileDrop2
{
	file = reference0
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp" 
		{
			Wallpaperfile = reference0
			
			"\0\s[0]The file you dropped is %(_filename)%(_fileext).\w8 How would you like me to set this picture as your wallpaper?\n\n[half]/
			\q[Centered,SetWallpaper_0]\n/
			\q[Tiled,SetWallpaper_1]\n/
			\q[Stretched,SetWallpaper_2]\n\n[half]/
			\q[No thanks,SetWallpaper_Cancel]\e"
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au" 
		{
			"I'm adding '%(_filename)' to your music directory\e"
			--
			FCOPY(reference0,"aud")
		}
		when ".txt"
		{
			if (tentruth == 1 || glitchboot <= 5)  && meeting == 1
			{
				if repairglitch != 1
				{
					if "Log#" _in_ _filename
					{
						"Ò̵̬h̴̳͊̈?̶̫̔̉ ̶̛̜̲́Ÿ̷̨̝́o̸̬͊u̶͓̼̕͠ ̷̉͜f̴͓͌ơ̷͎u̵̙̎n̷͖͌d̷͍͛ ̴̫͋o̶̢̼̒̎ṋ̷̓̈́ȩ̶̟̎ ̶̬͖̈́o̸̼͠f̶͍͐̈ ̴̛͖̒h̶͖̳̑̓ỉ̴̜̔s̴͔̺͌̅ ̵̤̄͑l̵̲̅o̶̠̱̓ģ̷̺́̀s̴̻̺̃?̶͈̜̒͋ ̵̩̌͗W̵̮̠͌̑a̵͉̓̇ỉ̶̖̘t̵̳͎̾ ̷̪͂͝ä̸̹̂ ̷̩͑̃s̵͎̞̆͌e̷̦̐̀c̷͇̘̾̀o̷͕̝̐̓n̵͓̮̍̃d̵͖̐̋ ̸̛̤̹̄I̵͎̓̏ ̶̗͠͝w̸̯̠͒ĩ̶͙̗l̶̞̺͐͝l̸̹̣̐ ̵̱̮̔͠p̸̖͗̚u̸̞̻͑͠t̶͉̽ ̶̲̦̓̀i̸̗̙̕n̴̏ͅ ̸̦̍͠i̴̺̣̋t̸̟̽̂s̷̞̅̍ ̶͔͖̽p̷̨̡̊l̶̯͊̃a̸̼͑ç̶̹̽̋ĕ̵̤̲"
						--
						FCOPY(file,"logs")
					}
				}
				else
				{
					if "Log#" _in_ _filename
					{
						"%(distingstart)Oh? You found one of his logs? Wait a second I will put in its place"
						--
						FCOPY(file,"logs")
					}
				}
				
			}
			else
			{
				"\0\s[0]Opening %(_filename)%(_fileext)\![open,file,%(_filename)%(_fileext)].\e"
			}
		}
		when ".lnk", ".url"
		{
			"I'm adding '%(_filename)' to your apps\e"
			--
			FCOPY(file,"app")
		}
		others
		{
			if REPLACE(_fileext,".","") _in_ projecttypes
			{
				"I'm adding '%(_filename)' to your project directory\e"
				--
				FCOPY(file,'projects')
			}
			else
			{
				"\0\s[0]This is %(_filename)%(_fileext).\e"
			}
		}
	}
}


Select.SetWallpaper_0
{
    
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]The image is centered.\e"
}
Select.SetWallpaper_1
{
    
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]The image is tiled.\e"
}
Select.SetWallpaper_2
{
    
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]The image is stretched.\e"
}
Select.SetWallpaper_Cancel
{
    
	"\0\s[0]So you don't want to set the file as your desktop background? \0\s[0]Kay.\e"
}
 
OnInstallBegin
 {
    
	"\0\s[0]Beginning installation\w8\0\s[0]This zip or nar contains an install.txt file.\e"
 }
 
OnInstallComplete
 {
    
	"\0" 
 	--
	if reference0 == "shell" 
 	{	
		if reference1 == "Hypothetical Shell that doesn't actually exist"
		{
		"\s[0]We have installed Hypothetical Shell.\w8\0\s[0]Truncated for space.\e"

		}
		elseif reference1 == "Another totally real shell wow" 
		{
		"\s[0]We have installed another totally real shell.\e"
		}
		else 
		{
		"\s[0]I've installed a new shell.\w8\0\s[0]It's called  %(reference1).\e"
		}
 	}
	elseif reference0 == "ghost" 
 	{
		installed = reference1
		--
		"\s[0]I've installed a new Ghost.\w8\0\s[0] It's called %(reference1).\n\n[half]Should I call them?\n\n[half]\q[Yes,callghost]\n\q[No,nocall]."
		--
		if meeting == 1 && (tentruth == 1 || glitchboot <= 5) 
		{
			if repairglitch != 1
			{
				"O̴h̸,̷ ̵a̶ ̵n̵e̴w̸ ̸p̸r̴o̷g̸r̸a̸m̶?̶"
			}
			else
			{
				"\1%(distingstart)Oh, a new program?"
			}
			
		}
		--
		OnCountGhosts
 	}
	elseif reference0 == "balloon" 
 	{
		"\s[0]I've installed a new balloon.\w8\0\s[0] It's called %(reference1).\e"
 	}
	elseif reference0 == "plugin" 
 	{
		"\s[0]I've installed a plug-in.\w8\0\s[0] It's called %(reference1).\e"
		
 	}
}

Select.callghost
{
	"\![call,ghost,%(installed)]\e"
}

Select.nocall
{
	"...\e"
}

OnInstallFailure
 {
    
	"\0\s[0]The installation has failed.\n\n[half]\w5"
	--
	if reference0 == "unsupported" 
	{
		"This file is unsupported.\e"
	
	}	
	elseif reference0 == "extraction" 
	{
		"The file could not be extracted properly.\e"
	}
 }
 
OnInstallRefuse
 {
    
	"\0\s[0]I can't install this. \w4It may be for %(reference0) instead.\e"
 }

OnVanishSelecting
{
    
	"\0\s[0]\i[7]You want to uninstall me?\e"
}

OnVanishSelected
{
    
	"\0\s[0]Oh .\w5 .\w5 .\w5 \w8\0\s[0]%(byebye) then.\w9\w9\e"
}



OnVanishCancel
{
    
	"\0\s[0]\i[6]Guess I'm staying.\e"
}

TalkVanishButtonHold
{
    
	"\0\s[0].\w5 .\w5 .\w5\e"
}
 
OnVanished
{
    
	"\0\s[0]You uninstalled %(reference0)?\w8 Harsh\e" 
}

 
OnBIFFBegin
 {
    
	"\0\s[0]Checking Email.\e"
 }
 
OnBIFFComplete
 {
    
	if reference0 == 0
 	{
 		"\0\s[0]There is no new mail.\e"
	}
	elseif reference0 == 1
 	{
 		"\0\s[0]There is one new email.\e"
	}
	elseif reference0 > 1 && reference0 < 11
	{
		"\0\s[0]There are %(reference0) emails.\e"
	}
	elseif reference0 > 100
	{
		"\0\s[0]There are %(reference0) emails unread.\e"
	}
 	else
	{
		"\0\s[0]There are %(reference0) emails.\e"
 	}
}
 
OnBIFFFailure
 {
    
	if reference0 == "timeout"
 	{
 		"\0\s[0]The connection has timed out.\e"
	}
 	elseif reference0 == "kick" 
	{
		"\0\s[0]I can't access the account.\e"
 	}
	elseif reference0 == "defect"
 	{
 		"\0\s[0]The email account was not set up properly.\w8\0\s[0]It can be reset at the POP menu.\![open,configurationdialog]\e"		
	}
 	els
	{
		"\0\s[0]I can't connect to the account.\w8\0\s[0]The error returned is '%(reference[0])'.\e"
 	}
}
 
OnUpdateBegin
 {
    
	"\0\s[0]Starting Update.\w8\e"	
 }

 
OnUpdateReady
 {
    udatefiles = TOINT(reference[0]) + 1
	"\0\s[0]There are %(udatefiles) new files.\w8\e"
	
 }

OnUpdateComplete
 {
    
	if reference0 == "none"
 	{
 		"\0\s[0]No update available\e"
	}
 	else
	{
		"\0\s[0]Update successful!\e"
		--
		OnToolCheck
 	}
}
 
OnUpdateFailure
 {
    
	if reference0 == "timeout"
 	{
 		"\0\s[0]The update connection has timed out.\e"
	}
 	elseif reference0 == "md5 miss" 
	{
		"\0\s[0]The MD5 hash of the files don't match.\e"
 	}
	else
 	{
 		"\0\s[0]The update could not be completed.\w8\0\s[0]The error is '%(reference0)'.\e"
	}
 }
 
OnUpdate.OnDownloadBegin
 {
	"\_qUPDATING: %(reference0)\n\n"

	if "aitalk" _in_ reference0
	{
		"Change in AI dialogue found\e"
	}
	elseif "mouse" _in_ reference0
	{
		"Change in interactions found\e"
	}
	elseif "menu" _in_ reference0
	{
		"Change in menu intractions found\e"
	}
	elseif "bootend" _in_ reference0
	{
		"Change in boot system found\e"
	}
	elseif "config" _in_ reference0
	{
		"Change in settings found\e"
	}
	elseif "log" _in_ reference0
	{
		logt = 1
		"Change in logs found\e"
	}
	elseif "clothes" _in_ reference1
	{
		"Change in clothing system found\e"
	}
	else //for files not specified above
	{
	""
	} 
	--
	"\w5\e"
 }

OnUpdateCheckComplete
{
	if reference0 != "none"
	{
		"There is an update avalible"
		--
		"\n\![*]\q[Update software,up]\n\n[half]\![*]\q[Update later,lat]\e"
	}
}

Select.up
{
	"\![updatebymyself]"
}

Select.lat
{

}

OnUpdateCheckFailure
{
	"ERROR\w8 Update check faliure\w reason: %(Reference0)"
}

OnUpdate.OnMD5CompareBegin
 {
    
	"\0\s[0]Checking the MD5 value.\e"
 }

OnUpdate.OnMD5CompareComplete
 {
    
	"\0\s[0]MD5 check good.\e"
}

 
OnUpdate.OnMD5CompareFailure
 {
    
	"\0\s[0]The MD5 values don't match.\w8\e"
 }
 
OnHeadlinesenseBegin
 {
    
	"\0\s[0]You've selected %(reference0).\e"
 }

OnHeadlinesense.OnFind
{
    
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
    
	"\0\s[0]Headline viewing complete.\e"
}
 
OnHeadlinesenseComplete
 {
    
	"\0\s[0]No update. %(reference0).\e"
 }

 
OnHeadlinesenseFailure
  {
    
	"\0\s[0]The feed can't updated.\w5" 
 	--
	if reference0 == "can't download" 
 	{
		"It can't be downloaded."
 	}
	elseif reference0 == "can't analyze" 
 	{
		"It can't be analyzed."
 	}
	else 
 	{
		"I don't know why."
 	}
	--
 	"\e" 
}
 
OnUpdatedataCreating
 {
    
	"\0\s[0]Creating the updates2.dau file.\e"
 }

OnUpdatedataCreated
 {
    
	"\0\s[0]Successfully created updates2.dau.\e"
 }
 
OnNarCreating
 {
    
	"\0\s[0]Creating the .nar file.\e"
 }

OnNarCreated
 {
    
	"\0\s[0]Successfully created '%(reference0)'.\e"
 }

 
OnSNTPBegin
 {
    
	"\0\s[0]I'm going to check the time.\w9\0\s[0]I am connecting to %(reference0).\e"
 }
 
OnSNTPCompare
 {
    
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
 	if reference3 == 0 
	{
 		"\0\s[0]Your clock is accurate.\e" 
	}
 	else 
	{
 		"\0\s[0]Your clock doesn't match.\w6\nShould I fix it?\n\n[half]/
		\![*]\q[Fix it,OnSNTPEXECUTE]\n/
 		\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
	}
 }
 
OnSNTPEXECUTE
 {
    
	"\0\s[0]The clock has been fixed.\6\e"
 }

OnSNTPCANCEL
 {
    
	"\0\s[0]The clock stayed the same.\e"
 }

 
OnSNTPFailure
 {
    
	"\0\s[0]The clock wasn't changed.\w8\0\s[0]Something went wrong.\e"
 }


 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }


 
OnScreenSaverStart
 {
    
	"\0\s[0]The screensaver is starting.\e"
 }

 
OnScreenSaverEnd
 {
    
	"\0\s[0]Back to work!\e"
 }

 
OnApplicationBoot
 {
    
	"\0\s[0]%(reference0) just started.\e"
 }

 
OnApplicationClose
 {
    
	"\0\s[0]%(reference0) has closed.\e"
 }

OnApplicationFileOpen
 {
    
	"\0\s[0]Opening %(reference1).\e"
 }


OnBatteryLow
 {
    
	"\0\s[0]The laptop's battery is low. \w8\0\s[0]There is %(reference0) power left.\e"
 }
 
OnBatteryCritical
{
    
	"\0\s[0]The laptop's battery is critically low.\e"
}
 
OnSysResourceLow
 {
    
	"\0\s[0]The system resources are low.\e"
 }
 
OnShellScaling
{
    
	if reference0 >= 150 
	{
		"\0\s[0]I'm now 150% of my size!\e"
	}
	elseif reference0 == 100 
	{
		"\0\s[0]I am normal sized.\e"
	}
	elseif reference0 == 50
	{
		"\0\s[0]Im now 50% of my size!\e"
	}
}

OnDeviceArrival
{
	_device = reference[0][0,","] + reference[0][1,","] + reference[0][2,","] + reference[0][4,","]
	_device = TOLOWER(_device) 
	
	if ("wacom" _in_ "%(_device)" || "tablet" _in_ "%(_device)") && (tentruth == 1 || glitchboot <= 5)
	{
		if repairglitch != 1
		{
			"H̷m̴?̷ ̴I̵s̵ ̵t̵h̴a̴t̷ ̴a̵ ̷d̸r̷a̵w̸i̵n̵g̵ ̴t̸a̸b̷l̸e̶t?\e"
		}
		else
		{
			"%(distingstart)Hm? Is that a drawing tablet?\e"
		}
	}
}

//Weather Checking -------------------------------------------------------
//following functions can go in menu dic, or a seperate dic entirely
//functions for scraping weather.com for weather data.
//author: vita @yuyudev on twitter
//referenced zarla's hunter and smoker ghost, and https://forum.rainmeter.net/viewtopic.php?t=34470
//
//please add the following variables to your bootend dic in the function OnFirstBoot
//curlocation = ""
//locationcode = ""
//these two I also added to OnBoot
//intalkconfig = 0
//weatherquiet = 0

//regex updating
OnDownloadRegex {
    "\0\s[0]Updating weather code...\w4\![execute,http-get,https://vtodd15.github.io/weatherregex.txt,--async=OnUpdateRegex,--timeout=200]"
}
OnUpdateRegex {
    //clean out old regex
    regex = IARRAY
    _buff = ""
    _file = "var\\weatherregex.txt"
    FCHARSET(1)
    _i = 0
    if FOPEN(_file,'r') {  
        for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {        
            regex[_i] = _buff
            _i++        
        }    
    }    
    FCLOSE(_file);    
    "Done!\x"    
    --   
    OnCheckWeather        
}

//starting the weather checking

