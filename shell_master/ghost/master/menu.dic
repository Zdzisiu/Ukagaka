OpenSakuraMenu
{
	if workmode != 1
	{
		"\0\s[0]\b2..."
	}
	--
	MenuRun
}

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	--
	if workmode != 1
	{
		"\n\n[half]\_q\b2" 
		--
		if lastTalk != "" 
		{
		"\![*]\q[Repeat Last Dialogue,OnLastTalk]\n"
		}
		--
		"\![*]\q[Say something,altalk]\n\n[half]"
		--
		"\![*]\q[Questions,ques]\n"
		--
		"\![*]\q[Work Mode ON,workmodes]\n"
		--
		"\![*]\q[Config Menu,configmenu]\n/
		\![*]\q[Functions,dosomething]\n\n[half]/
		\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	}
	else
	{
		"\n\n[half]\_q\b2Active Ghost: \f[bold,1]%(activeghost[0])\f[bold,0]\n" 
		--
		if shellorghost == "Shell"
		{
			"Active Shell: \f[bold,1]%(activeghost[3])\f[bold,0]\n"
		}
		--
		"\n[half]\![*]\q[Ghosts,ghosts]\n"
		--
		if shellorghost == "Shell"
		{
			"\n[half]\![*]\q[Shells,OnChngShell]\n"
			--
			"\![*]\q[Change range of surfaces,OnSettingsBatchChange]\n"
			--
			"\![*]\q[Surfaces.txt,OnReadFile_Surfaces]\n"
		}
		--
		"\n[half]Edit: \f[bold,1]\q[%(shellorghost),OnChangeFolder,shellorghost]\f[bold,0]\n\n[half]"
		--
		"\![*]\q[Work Mode OFF,workmodes]\n"
		--
		"\![*]\q[Nevermind,CANCEL]\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"

	}
	
}

/*activeghost
0. Name
1. Active Shell Folder
2. Path
3. Active shell Name
*/
Select.workmodes
{
	if workmode != 1
	{
		workmode = 1
	}
	else
	{
		workmode = 0
	}
	--
	OpenSakuraMenu
}

Select.ghosts
{
	page = "\b4\_q\n\n"
	--
	for _i=0;_i<ARRAYSIZE(installedghostlist);_i++
	{
		if installedghostlist[_i] _in_ workspace[0]
		{
			page += "\![*]\q[" + installedghostlist[_i] + ",OnChooseGhost," + _i + "," + shellorghost + "," + installedghostlist[_i] + "]\n"
		}
	}
	--
	if page == "\b4\_q\n\n"
	{
		page += "\f[bold,1]No ghosts added\f[bold,0]"
	}
	--
	page += "\n\n[half]\f[bold,1]Edit Workspace:\f[bold,0] \n\q[Remove ghost,removework] | \q[Add ghost,addwork]\n\n[half]\![*]\q[Nevermind,CANCEL]"
	--
	page
}

Select.removework
{
	page = "\b4\_q\n\n"
	--
	for _i=0;_i<ARRAYSIZE(installedghostlist);_i++
	{
		if installedghostlist[_i] _in_ workspace[0]
		{
			page += "\![*]\q[" + installedghostlist[_i] + ",OnRMVGhost," + _i + "," + installedghostlist[_i] + "]\n"
		}
	}
	--
	page += "\n\n[half]\![*]\q[Nevermind,CANCEL] | \![*]\q[Go Back,ghosts]"
	--
	page
}

OnRMVGhost
{
	workspace[0] = REPLACE(workspace[0],reference1,"")
	--
	Select.removework
}

Select.addwork
{
	page = "\b4\_q\n\n"
	--
	for _i=0;_i<ARRAYSIZE(installedghostlist);_i++
	{
		if installedghostlist[_i] !_in_ workspace[0]
		{
			page += "\![*]\q[" + installedghostlist[_i] + ",OnAddWRK," + _i + "," + installedghostlist[_i] +  ",]\n"
		}
	}
	--
	page += "\n\n[half]\![*]\q[Nevermind,CANCEL] | \![*]\q[Go Back,ghosts]"
	--
	page
}

OnAddWRK
{
	workspace[0] += reference1 + "|"
	--
	Select.addwork
}

OnChooseGhost
{
	activeghost[1] = ""
	activeghost[0] = reference2
	page = "\![get,property,OnChooseWorkspace,ghostlist.index("+ reference0 + ").path]"
	--
	page
}

OnChooseWorkspace
{
	activeghost[2] = REPLACE(reference0,"\","/") //"
	file = activeghost[2]
	--
	OpenSakuraMenu
}

OnChngShell
{
	_shellfile = file + "shell/"
	_shells = FENUM(_shellfile,",")
	_shells = REPLACE(_shells,"\","") //"{
	--
	pageshell = "\b4\_qChoose shell:\n\n"
	--
	foreach _shells ; _p
	{
		if !FOPEN(_filename = _shellfile + "\%(_p)\descript.txt","r")
			return
		while (_line = FREAD(_filename)) != -1;
		{
			if CUTSPACE(_line[0]) == "name"
			{ 
				shellsnames ,= CUTSPACE(_line[1])
				break;
			}
		}
	}
	for _i=1;_i<ARRAYSIZE(_shells)+1;_i++
	{
		pageshell += "\![*]\q[" + shellsnames[_i] + ",OnChooseShell," + _shells[_i-1] + "," + shellsnames[_i] + "]\n\n[half]"
	}
	--
	pageshell += "\![*]\q[Nevermind,Cancel]\e"
	--
	pageshell
}


//\![raise,GetShells]
GetShells
{
	_shellfile = file + "shell/"
	_shells = FENUM(_shellfile,",")
	_shells = REPLACE(_shells,"\","") //"{
	--
 	_shellsnames = IARRAY
  	_paths = FENUM("..\..\shell")
  foreach _paths ; _p
  {
    if FOPEN(_filename = "..\..\shell\%(_p)\descript.txt","r")
    {
      while (_line = FREAD(_filename)) != -1;
      {
        if CUTSPACE(_line[0]) == "sakura"
        { 
          _shellsnames ,= CUTSPACE(_line[1])
          break;
        }
     }
      FCLOSE(_filename)
    }
  }
  _shellsnames
}

OnReadFile_Surfaces
{
	_file = activeghost[2] + "shell/" + activeghost[1] + "/surfaces.txt"
	--
	line = ""
	lines = ""
	_x = 0
	lenght = 0
	--
	if FOPEN(_file,"r")
	{
		//"Opened %(file)"
		/*}
		else
		{
			"error"
		}
		--*/
		for _i=0;_x!=1;_i++
		{
			line = FREAD(_file)
			lenght++
			--
			if line == "-1"
			{
				_x = 1
			}
			else
			{
				lines += line + "\n"
			}
		}
		--
		FCLOSE(_file)
	}
	else
	{
		"error %(_file)"
	}
	--
	ReadSurfaces
}

ReadSurfaces
{
	page = "\b4\_q"
	linebyline = SPLIT(lines,"\n")
	--
	for _i=0;_i<=lenght;_i++
	{
		if RE_SEARCH(linebyline[_i],"surface(\.*)") && "element" !_in_ linebyline[_i]
		{
			_surfacenum = RE_GETSTR[1]
			page += "\![*]\q[" + linebyline[_i] + ",OnDescSurf," + surfacenum + "," + _i + "]\n"
		}
	}
	--
	page
}

OnDescSurf
{
	page = "\b4\_q"
	--
	for _i=reference1+1;_i<=lenght;_i++
	{
		if linebyline[_i] != ""
		{
			if "}" _in_ linebyline[_i]
			{
				_i = lenght
			}
			elseif "{" _in_ linebyline[_i]
			{
				
			}
			else
			{
			}
		}

	}
	--
	page
}

OnChooseShell
{
	activeghost[1] = reference0
	activeghost[3] = reference1
	--
	OpenSakuraMenu
}

OnChangeStuFFG
{
	edit = reference0
	page = "\![get,property,OnGetPath,ghostlist.index("+ reference1 + ").path]"
	--
	page
}

OnChangeFolder
{
	if shellorghost == "Shell"
	{
		shellorghost = "Ghost"
	}
	else
	{
		shellorghost = "Shell"
	}
	--
	OpenSakuraMenu
}

Select.ques
{
	"\![*]\q[Conversion,OnQuestion,con]\n"
	--
	"\n[half]\![*]\q[I'm Done,CANCEL]"
}

OnSettingsBatchChange
{
	if changed != ""
	{
			if changed == "howmany"
			{
				batchchange[0] = TOINT(reference0)
			}
			elseif changed == "oldstart"
			{
				batchchange[1] = TOINT(reference0)
			}
			elseif changed == "newstart"
			{
				batchchange[2] = TOINT(reference0)
			}
			--
			changed = ""
	}
	--
	"\_q\b2How many surfaces to change: \f[bold,1]\q[%(batchchange[0]),OnChangeStat_sur,howmany]\f[bold,0]\n\n[half]"
	--
	"\b2Old starting number: \f[bold,1]\q[%(batchchange[1]),OnChangeStat_sur,oldstart]\f[bold,0]\n\n[half]"
	--
	"\b2New starting number: \f[bold,1]\q[%(batchchange[2]),OnChangeStat_sur,newstart]\f[bold,0]\n\n[half]"
	--
	"\![*]\q[CHANGE,OnBatchChange]"
}

OnChangeStat_sur
{
	changed = reference0
	--
	"\![open,inputbox,OnSettingsBatchChange]"
}

OnBatchChange
{
	_start = batchchange[1]
	_newstart = batchchange[2]
	_howmanu = batchchange[0]
	--
	for _i=0;_i<=_howmanu;_i++
	{
		FRENAME(file + "/shell/" + activeghost[1] + "/surface" + (_start + _i) + ".png",file + "/shell/" + activeghost[1] + "/surface" + (_newstart + _i) + ".png")
	}
	--
	"\![open,file,%(file)/shell/%(activeghost[1])]"
}

OnQuestion
{
	case reference0
	{
		when "con"
		{
			"To convert your surfaces.txt file drag and drop it on me"
		}
	}
	--
	"\n\n[half]\![*]\q[Ask something else,ques] | \![*]\q[I'm Done,CANCEL]"
}

Select.altalk
{
	AiTalk
}

OnLastTalk 
{
	"%(lastTalk)\e"
}

GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

GetAP
{
 	if hour >= 0 && hour <= 11
	{
		"AM"
	}
 	else
	{
		"PM"
	}
}

Getnowmin
{
	if minute >= 0 && minute <=9
	{
		"0%(minute)"
	}
	else
	{
		"%(minute)"
	}
}

Getnowhour
{
	if hour12 >= 0 && hour12 <=9
	{
		"0%(hour12)"
	}
	else
	{
		"%(hour12)"
	}
}

Select.BACKTOMENU
{
	MenuRun
}
Select.configmenu
{
	TalkConfig
}

TalkConfig
{
	"\0\b[2]\_q" 
	--
	"\f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	--
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	--
	"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n"
	--
	"\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n"
	--
	"\f[bold,1]File Conversion:\f[bold,0]\n\n[half]"
	--
	"\f[bold,1]Name of a converted file:\f[bold,0] \q[%(afterconfile),filecon]\n"
	--	
	"\f[bold,1]Surface.txt Generation:\f[bold,0]\n\n[half]"
	--
	"\f[bold,1]Definition:\f[bold,0] \q[%(defi),defi]\n"
	--		
	{
	"\n[half]\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
	}
	--
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

Select.defi
{
	if defi == "OLD"
	{
		defi = "NEW"
	}
	else
	{
		defi = "OLD"
	}
	--
	TalkConfig
}

Select.filecon
{
	"\![open,inputbox,OnConFile,-1]"
}

OnConFile
{
	if ".txt" _in_ reference0
	{
		afterconfile = reference0
	}
	else
	{
		afterconfile = reference0 + ".txt"
	}
}

Select.TEACHPRONOUN
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	--
	"\0\s[0]The pronouns are now he him and his.\e"
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	--
	"\0\s[0]The pronouns are now she her and her.\e"
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	--
	"\0\s[0]The pronouns are now they them and their.\e"
}

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}

Select.TEACHBDAY
{
	dayslot = GetDaySlot 
	--
	"\0\s[0]What month were you born? \w8Write the number.\![open,inputbox,OnUserBornMonth,-1]\e"
}

OnUserBornMonth
{
	_tempmonth = reference0 
	--
	if _tempmonth >= 1 && _tempmonth <= 12 
	{
	bornmonth = _tempmonth
	bornmonthprint = Printmonth
	"\0\s[0]So you were born in %(bornmonthprint).\n\w8What day was it?\![open,inputbox,OnUserBornDay,-1]\e"
	}
	else 
	{
	"\0\s[0]That's not a valid month. Try again.\![open,inputbox,OnUserBornMonth,-1]\e"
	}
}

Printmonth
{
	if bornmonth == 1
	{
		"January"
	}
	elseif bornmonth == 2
	{
		"February"
	}
	elseif bornmonth == 3
	{
		"March"
	}
	elseif bornmonth == 4
	{
		"April"
	}
	elseif bornmonth == 5
	{
		"May"
	}
	elseif bornmonth == 6
	{
		"June"
	}
	elseif bornmonth == 7
	{
		"July"
	}
	elseif bornmonth == 8
	{
		"August"
	}
	elseif bornmonth == 9
	{
		"September"
	}
	elseif bornmonth == 10
	{
		"October"
	}
	elseif bornmonth == 11
	{
		"November"
	}
	else
	{
		"December"
	}
}

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{
	"%(bornday)st"
	}
	elseif bornday == 2 || bornday == 22
	{
	"%(bornday)nd"
	}
	elseif bornday == 3 || bornday == 23
	{
	"%(bornday)rd"
	}
	else
	{
	"%(bornday)th"
	}
}	

OnUserBornDay
{
	tempday = reference0 
	if bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12 
	{
		if tempday >= 1 && tempday <= 31 
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
			"%(birthchecked)"
		}
		else 
		{
			"\0\s[0]That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
		}
	}
	elseif bornmonth == 2 
	{
		if tempday >= 1 && tempday <= 29 
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
			"%(birthchecked)"
		}
		else
		{
			"\0\s[0]That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
		}
	}
	else 
	{
		if tempday >= 1 && tempday <= 30 
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
			"%(birthchecked)"
		}
		else
		{
			"\0\s[0]That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
		}
	}		
}

birthchecked
{
	"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint). We'll remember.\e"
}

Select.talkinter
{
	"\0\s[0]\b2The interval is currently set to %(talktime)./
	\0\n\n[half]/
	\![*]\q[Every 30 seconds,TALKMAX]\n/
	\![*]\q[Every minute,TALKHIGH]\n/
	\![*]\q[Every 3 minutes,TALKNORMAL]\n/
	\![*]\q[Every 5 minutes,TALKPOOR]\n/
	\![*]\q[Don't speak,TALKNONE]\n\n[half]/
	\![*]\q[Don't change,TalksTill]\e"
}

Select.TalksTill
{
	"\0\s[0]No change to the talk rate.\e"
}

Select.TALKMAX
{
	talktime = "30 seconds" 
	aitalkinterval = 45 
	"\0\s[0]Speak every 30 seconds.\e"
}

Select.TALKHIGH
{
	talktime = "minute"
	aitalkinterval = 90
	"\0\s[0]Speak every minute.\e"
}

Select.TALKNORMAL
{
	talktime = "3 minutes"
	aitalkinterval = 270
	"\0\s[0]Speak every three minutes.\e"
}

Select.TALKPOOR
{
	talktime = "5 minutes"
	aitalkinterval = 400
	"\1\s[10]Speak every five minutes.\e"
}

Select.TALKNONE
{
	talktime = "silence"
	aitalkinterval = 0
	"\0\s[0]Silence\e"
}

Select.TEACHNAME
{
	OnTeachName	
}

Select.CANCEL
{
	"\0\s[0]...\e"
}

Select.dosomething
{
	"\0\s[0]\b2...\n\n"
	--
	"\![*]\q[Open Calendar,CALENDAR]\n/
	\![*]\q[Check Email,MailCheck]\n/
	\![*]\q[Open SSP Preferences,sspconfig]\n/
	\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
	\![*]\q[System Information,ChoiceSystemInformation]\n\n/
	\![*]\q[Back to main menu,BACKTOMENU]\e"
}

Select.CALENDAR
{
	"\0\s[0]...\![open,calendar]\e"
}

Select.sspconfig
{
	"\0\s[0]...\![open,configurationdialog]\e"
}

Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	
	if _gomicheck == 0 
	{
		"\0\s[0]... It's empty.\e"
	}
	elseif _gomicheck >= 1 
	{
		"\0\s[0]...Done.\e"
	}
}

OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}

Select.MailCheck
{
	"\![biff]\e"
}

Select.HEADLINECANCEL
{
	"\0\s[0]Finished with headlines.\e"
}

OnChoiceTimeout
{
	"\0\s[0]The menu has timed out.\e"
}

OpenKeroMenu
{
	"\1\s[10]\b[2]"
 	--
	"..."
 	--
	"\n\n[half]/
	\![*]\q[Nothing,keroCANCEL]\e"
}

Select.keroCANCEL
{
	"\1\s[10]...\e"
}

OnConvert_read
{
	_file = "conversion/surfaces.txt"
	oldsurface = ""
	_x = 0
	lenght = 0
	--
	FOPEN(_file,"r")
	--
	for _i=0;_x!=1;_i++
	{
		line = FREAD(_file)
		lenght++
		--
		if line == "-1"
		{
			_x = 1
		}
		else
		{
			oldsurface += line + "\n"
		}
	}
	--
	FCLOSE(_file)
	--
	OnConvert_write
}

OnConvert_write
{
	_file = "conversion/" + afterconfile
	oldsurface = REPLACE(oldsurface,",","!")
	lines = SPLIT(oldsurface,"\n")
	newfile = ""
	FCHARSET(1)
	_x = 0
	--
	for _i=0;_i<=lenght;_i++
	{
		subline = SPLIT(lines[_i] ,"!")
		--
		if "interval" _in_ lines[_i] 
		{
			_linereg = '(\d*)interval'

			if RE_SEARCH ( lines[_i], _linereg ) {
				num = RE_GETSTR[1]
			}
			--
			newfile += "animation" + num + ".interval," + subline[1] + "\n"
		}
		elseif "pattern" _in_ lines[_i] 
		{
			_linereg = '(\d*)pattern(\d*),'

			if RE_SEARCH ( lines[_i], _linereg ) {
				intervalnum = RE_GETSTR[1]
				patternnum = RE_GETSTR[1]
			}
			--
			newfile += "animation" + intervalnum + ".pattern" + patternnum + "," + subline[3] + "," + subline[1] + "," + subline[2]  + "," + subline[4] + "," + subline[5] + "\n"
		}
		else
		{
			newfile += REPLACE(lines[_i],"!",",") + "\n"
		}
	}
	--
	FOPEN(_file,"w")
	--
	line = SPLIT(newfile,"\n")
	lenght = ARRAYSIZE(line)
	if "descript" !_in_ oldsurface
	{
		FWRITE(_file,"descript")
		FWRITE(_file,"{")
		FWRITE(_file,"version,1")
		FWRITE(_file,"}")
		FWRITE(_file,"")
	}
	--
	for _i=0;_i<=lenght;_i++
	{
		FWRITE(_file,line[_i])
	}
	--
	FCLOSE(_file)
	--
	"\![open,file,conversion]"

}
//1pattern0,101,70,overlay,200,100 --> animation1.pattern0,overlay,101,700,200,100
//0        , 1 ,2 ,3,     ,4  ,5